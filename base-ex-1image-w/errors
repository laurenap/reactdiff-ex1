{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8804406,"sourceType":"datasetVersion","datasetId":5295056}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"fded1b22-78cf-4a9b-a31b-6fa13bcd0569","_cell_guid":"a26a5d34-ee18-49b7-9af8-c77f73903dfe","collapsed":false,"execution":{"iopub.status.busy":"2024-06-27T16:29:13.691640Z","iopub.execute_input":"2024-06-27T16:29:13.692023Z","iopub.status.idle":"2024-06-27T16:29:14.100003Z","shell.execute_reply.started":"2024-06-27T16:29:13.691994Z","shell.execute_reply":"2024-06-27T16:29:14.098677Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# STEP 1 [install req. libraries]","metadata":{"_uuid":"7b865a94-a414-484c-af46-80b0c849426e","_cell_guid":"697f506d-aa79-48bf-b838-4addcf48a25e","trusted":true}},{"cell_type":"code","source":"pip install numpy scipy matplotlib","metadata":{"_uuid":"911259bd-c707-4a28-a63c-7de5b696cf0c","_cell_guid":"c7166968-742d-4bdf-b129-684761f31e52","collapsed":false,"execution":{"iopub.status.busy":"2024-06-27T16:29:14.102547Z","iopub.execute_input":"2024-06-27T16:29:14.103311Z","iopub.status.idle":"2024-06-27T16:29:46.034220Z","shell.execute_reply.started":"2024-06-27T16:29:14.103266Z","shell.execute_reply":"2024-06-27T16:29:46.032869Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# STEP 2 [ basic implementation of reaction-diffusion model ]\n\nPlease note that this simplified version mainly focuses on HGG growth. I intend to build off this model once I acuquire the necessary pHGG data, possible addition of patient specifc parameters / dependencies to aid in the models' clinical utlilty.","metadata":{"_uuid":"fbb89891-18c6-4f85-a97b-355afb02d9ad","_cell_guid":"629d49af-1ca2-4bb3-87f6-a9ac2f4c3e6f","trusted":true}},{"cell_type":"code","source":"import numpy as np\nimport scipy.ndimage as nd\nimport matplotlib.pyplot as plt\n\n\nsize = 256\nU = np.ones((size, size)) * 0.5  # Initial tumor cell concentration\nV = np.zeros((size, size))  # Initial environmental factor\n\n# Define diffusion and reaction parameters\nDu = 0.1  # Diffusion coefficient for tumor cells\nDv = 0.05  # Diffusion coefficient for environment factor\nF = 0.035  # Feed rate (proliferation rate)\nk = 0.065  # Kill rate (cell death rate)\ndt = 1.0  # Time step\n\n# Define the reaction-diffusion step function\ndef reaction_diffusion_step(U, V, Du, Dv, F, k, dt):\n    laplacian_U = nd.laplace(U)\n    laplacian_V = nd.laplace(V)\n    \n    dU = (Du * laplacian_U - U * V**2 + F * (1 - U)) * dt\n    dV = (Dv * laplacian_V + U * V**2 - (F + k) * V) * dt\n    \n    U += dU\n    V += dV\n    return U, V","metadata":{"_uuid":"0e3a4817-268f-4fd0-bee7-745b1c56062d","_cell_guid":"821c4407-7348-4370-ba8a-efcf0e4843d3","collapsed":false,"execution":{"iopub.status.busy":"2024-06-27T16:29:46.036066Z","iopub.execute_input":"2024-06-27T16:29:46.036573Z","iopub.status.idle":"2024-06-27T16:29:46.047780Z","shell.execute_reply.started":"2024-06-27T16:29:46.036526Z","shell.execute_reply":"2024-06-27T16:29:46.046609Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"num_steps = 10000  # Number of time steps\nfor step in range(num_steps):\n    U, V = reaction_diffusion_step(U, V, Du, Dv, F, k, dt)\n    if step % 1000 == 0:\n        plt.imshow(U, cmap='hot', interpolation='nearest')\n        plt.title(f\"Step {step}\")\n        plt.show()\n\n# Final visualization\nplt.imshow(U, cmap='hot', interpolation='nearest')\nplt.title(\"Final Tumor Cell Concentration\")\nplt.colorbar()\nplt.show()","metadata":{"_uuid":"13b02316-c8e2-4c5a-9780-d040c6edfe0b","_cell_guid":"3bbeef18-dcc1-4454-b04f-c0089681a7cc","collapsed":false,"execution":{"iopub.status.busy":"2024-06-27T16:29:46.050367Z","iopub.execute_input":"2024-06-27T16:29:46.051141Z","iopub.status.idle":"2024-06-27T16:30:11.924845Z","shell.execute_reply.started":"2024-06-27T16:29:46.051104Z","shell.execute_reply":"2024-06-27T16:30:11.923530Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install opencv-python","metadata":{"_uuid":"63cf2f02-51b7-48eb-93a0-1c5203a36ee2","_cell_guid":"859f3ab4-d6a4-4dc0-8b41-ad47af19b222","collapsed":false,"execution":{"iopub.status.busy":"2024-06-27T16:30:11.926241Z","iopub.execute_input":"2024-06-27T16:30:11.926662Z","iopub.status.idle":"2024-06-27T16:30:44.043143Z","shell.execute_reply.started":"2024-06-27T16:30:11.926631Z","shell.execute_reply":"2024-06-27T16:30:44.041713Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Function to load and preprocess the image\ndef load_and_preprocess_image(image_path):\n    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)  # Load image in grayscale\n    image = cv2.resize(image, (256, 256))  # Resize to match model grid size\n    image = image / 255.0  # Normalize pixel values to [0, 1]\n    return image\n\n# Load your initial tumor data\ninitial_tumor_image_path = 'kaggle/input/mri-image-data/Testing/glioma_tumor/image(15).jpg'\ninitial_tumor_concentration = load_and_preprocess_image'kaggle/input/mri-image-data/Testing/glioma_tumor/image(15).jpg'\n\n# Display the initial tumor concentration\nplt.imshow(initial_tumor_concentration, cmap='hot', interpolation='nearest')\nplt.title(\"Initial Tumor Cell Concentration\")\nplt.colorbar()\nplt.show()","metadata":{"_uuid":"bb8c899d-8387-4919-bc54-a723fbf56ec8","_cell_guid":"6c69d6c2-5efd-4e0b-af80-018847e2765e","collapsed":false,"execution":{"iopub.status.busy":"2024-06-27T17:03:11.773761Z","iopub.execute_input":"2024-06-27T17:03:11.774132Z","iopub.status.idle":"2024-06-27T17:03:11.782638Z","shell.execute_reply.started":"2024-06-27T17:03:11.774106Z","shell.execute_reply":"2024-06-27T17:03:11.781032Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport scipy.ndimage as nd\n\n# Function to load and preprocess JPG images\ndef load_and_preprocess_jpg_image(file_path):\n    image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Load image in grayscale\n    if image is None:\n        raise ValueError(f\"Image not found or cannot be read at path: {file_path}\")\n    image = cv2.resize(image, (256, 256))  # Resize to match model grid size\n    image = image / 255.0  # Normalize pixel values to [0, 1]\n    return image\n\n# Example path to a JPG file\njpg_file_path = '/kaggle/input/mri-image-data/Testing/glioma_tumor/image(15).jpg'\ntry:\n    tumor_image = load_and_preprocess_jpg_image(jpg_file_path)\n    plt.imshow(tumor_image, cmap='hot', interpolation='nearest')\n    plt.title(\"Preprocessed Tumor Image\")\n    plt.colorbar()\n    plt.show()\nexcept ValueError as e:\n    print(e)\n\n# Initialize the grid with real data\nU = tumor_image  # Initial tumor cell concentration from real data\nV = np.zeros((256, 256))  # Initial environmental factor\n\n# Define diffusion and reaction parameters\nDu = 0.1  # Diffusion coefficient for tumor cells\nDv = 0.05  # Diffusion coefficient for environment factor\nF = 0.035  # Feed rate (proliferation rate)\nk = 0.065  # Kill rate (cell death rate)\ndt = 1.0  # Time step\n\n# Define the reaction-diffusion step function\ndef reaction_diffusion_step(U, V, Du, Dv, F, k, dt):\n    laplacian_U = nd.laplace(U)\n    laplacian_V = nd.laplace(V)\n    \n    dU = (Du * laplacian_U - U * V**2 + F * (1 - U)) * dt\n    dV = (Dv * laplacian_V + U * V**2 - (F + k) * V) * dt\n    \n    U += dU\n    V += dV\n    return U, V\n\n# Simulate the tumor growth\nnum_steps = 10000  # Number of time steps\nfor step in range(num_steps):\n    U, V = reaction_diffusion_step(U, V, Du, Dv, F, k, dt)\n    if step % 1000 == 0:\n        plt.imshow(U, cmap='hot', interpolation='nearest')\n        plt.title(f\"Step {step}\")\n        plt.colorbar()\n        plt.show()\n\n# Final visualization\nplt.imshow(U, cmap='hot', interpolation='nearest')\nplt.title(\"Final Tumor Cell Concentration\")\nplt.colorbar()\nplt.show()","metadata":{"_uuid":"088c6557-7ef1-421d-9535-70c76d3f5562","_cell_guid":"1cd160b2-0705-4015-9221-3f6f91008436","collapsed":false,"execution":{"iopub.status.busy":"2024-06-27T17:03:46.677409Z","iopub.execute_input":"2024-06-27T17:03:46.677833Z","iopub.status.idle":"2024-06-27T17:04:14.071589Z","shell.execute_reply.started":"2024-06-27T17:03:46.677801Z","shell.execute_reply":"2024-06-27T17:04:14.070435Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}